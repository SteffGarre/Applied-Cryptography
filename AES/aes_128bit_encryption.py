"""
** This code was written by Stefan Garrido 2023-02 **

Code below implements AES Encryption (128-bit) as part of an assignemnt in the course
DD2520, Applied Cryptography, KTH. 
For more information about AES, please visit: 
https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf
https://en.wikipedia.org/wiki/Advanced_Encryption_Standard

* Input
Standard input consists of a key to use, followed by one or more blocks to encrypt using that key.
The 128-bit key is given as the first 16 bytes of the file. The first byte gives the first 8 bits, and so on.
Each block consists of exactly 16 bytes. There are at most 106 blocks to encrypt.

* Output
Standard output should contain, for each block, the encryption of that block, in the same format as the input.
"""

# ---- Below are the predefined constants (as look up tables) according to the AES algorithm ---- #

# Used in key expansion
# More info: https://en.wikipedia.org/wiki/AES_key_schedule
r_con = (0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,0x80, 0x1B, 0x36)

# Tuple used to contain the s-box (immutable and quicker compared to list)
# S-box can be found in: https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf
sub_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

"""
Galois fields contains finite numbers of elements within a given field, in this case GF(2^8) (256 bits).
After the state has been updated in the shiftRows stage, the state is multiplied with the following table:
 [ 2 3 1 1 ]     [ b0 b4 b8  b12 ]
 [ 1 2 3 1 ]  X  [ b1 b5 b9  b13 ]
 [ 1 1 2 3 ]     [ b2 b6 b10 b14 ]
 [ 3 1 1 2 ]     [ b3 b7 b11 b15 ]
 pre-defined       state matrix
   matrix

-> Row x Column, example: (0x02 x b0) ^ (0x03 x b1) ^ (0x01 x b2) ^ (0x01 x b3) -> d0 (goes in new state matrix)
The tables below are used to speed up computation so that we dont have to calculate everything.
"""

# Galois multiplication look up table: multiply by 2
galois_table2 = (
    
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,	
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5  
)

# Galois multiplication look up table: multiply by 3
galois_table3 = (
    0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
    0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
    0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
    0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
    0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
    0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
    0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
    0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,	
    0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
    0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
    0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,	
    0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,	
    0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
    0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,	
    0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
    0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
)

# ---- Below are the defined functions used in the algorithm ----#

# The function xors the current state (16 bytes) with
# a corresponding roundkey defined using "keys" and "index"
def addRoundKey(state, keys, index):
    for i in range(0,4):
        for j in range (0,4):
            state[i][j] = state[i][j] ^ keys[index][j]
        index += 1
    
# The function substitutes every byte in state by using sub_box      
def subBytes(state):
    for i in range(0,4):
        for j in range (0,4):
            state[i][j] = sub_box[state[i][j]]

# The functions shifts the rows in state
# Note that no shift is done on row 0
# Inspiration taken from: https://github.com/boppreh/aes/blob/master/aes.py
def shiftRows(state):
    
    # Bytes in row 1 shifts 1 step to the left
    state[0][1], state[1][1], state[2][1], state[3][1] = state[1][1], state[2][1], state[3][1], state[0][1]
    # Bytes in row 2 shifts 2 step to the left
    state[0][2], state[1][2], state[2][2], state[3][2] = state[2][2], state[3][2], state[0][2], state[1][2]
    # Bytes in row 3 shifts 3 step to the left
    state[0][3], state[1][3], state[2][3], state[3][3] = state[3][3], state[0][3], state[1][3], state[2][3]
     
# The functions performs mixColumns on state acc. to AES
# The computation are done with the use of predefined tables
# Inspiration taken from: https://github.com/MaxDauber/tiny_aes
def mixColumns(state):
    # save result in new_state
    new_state = []
    
    # computation as described in Galois Field above 
    for i in range(0,4):
        result = []
        result.append(galois_table2[state[i][0]] ^ galois_table3[state[i][1]] ^ state[i][2] ^ state[i][3])
        result.append(state[i][0] ^ galois_table2[state[i][1]] ^ galois_table3[state[i][2]] ^ state[i][3])
        result.append(state[i][0] ^ state[i][1] ^ galois_table2[state[i][2]] ^ galois_table3[state[i][3]])
        result.append(galois_table3[state[i][0]] ^ state[i][1] ^ state[i][2] ^ galois_table2[state[i][3]])
        new_state.append(result)
        
    return new_state

# the function returns a list of lists that contains the roundkeys used in AES
# keys[0:4] is roundkey 0, keys[4:8] is roundkey 1, and so on ...
def key_expansion_128bit(key):
    
    #Add the 16 bytes from key (roundkey 0) to keys
    keys = []
    for i in range(0, len(key), 4):
        keys.append(list(key[i:i+4]))

    
    # is used when indexing r_con table
    index = 0
            
    # add the remaining roundkeys (1 to 10) to keys
    for i in range(0,40):
        
        # grab last list in keys
        last_column = list(keys[-1])
       
        # for every roundkey, modify the last column acc. to AES
        if i % 4 == 0:
            # Rotate order (RotWord() acc. to AES)
            last_column.append(last_column.pop(0))
            
            # Substitute bytes using sub_box (SubWord() acc. to AES)
            for j in range(0,4):
               last_column[j] = sub_box[last_column[j]]
            
            # xor first byte using r_con table (Rcon acc. to AES)
            last_column[0] ^= r_con[index]
            index += 1
        
        # xor the last coumn with the current list in keys
        # create new list to store result and append to keys
        xored_list = []
        for j in range (0,4):
            xored_list.append(keys[i][j] ^ last_column[j])    
        keys.append(xored_list)
        
    return keys  

import itertools
# The funtion goes through the necessary steps to encrypt acc. to AES 
# the list "state" is the current state of the encrypted plaintext
def encrypt_128bit(plaintext, keys):
    
    # add the 16 bytes from plaintext to state
    state = []
    for i in range(0, len(plaintext), 4):
        state.append(list(plaintext[i:i+4]))
    
    # Initial round: add roundkey 0 to state
    addRoundKey(state, keys, 0)
    
    # used to access roundkeys in keys
    index = 4
    
    # Apply neccesary steps in 9 rounds
    for i in range(1,10): 
        
        subBytes(state)      
        shiftRows(state)  
        state = mixColumns(state)
        addRoundKey(state, keys, index)
        index += 4
    
    # do the final round (nr 10)
    subBytes(state)
    shiftRows(state)     
    addRoundKey(state, keys, index) 
    
    # flatten the list state, store it in result and print
    result = list(itertools.chain.from_iterable(state))
    sys.stdout.buffer.write(bytes(result))
    
# sys is used to read from stdin
import sys

# Read inputfile, send key to key expansion to generate roundkeys,
# send plaintext (block of 16 bytes) to encryption with roundkeys.
try:
    #first 16 bytes is the key
    key = sys.stdin.buffer.read(16)
    # Generate roundkeys
    keys = key_expansion_128bit(key)
    
    #read 16 bytes for each block in the message, encrypt and print result
    block_16bytes = sys.stdin.buffer.read(16)
    while block_16bytes:
        encrypt_128bit(block_16bytes, keys)
        block_16bytes = sys.stdin.buffer.read(16)                     
except Exception as e:
    print('An error occured.')
    print('-> Error:', e)
    exit()
   
